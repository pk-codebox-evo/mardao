#set( $allFields = $entity.allFields )
package ${daoBasePackage};

import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;
import java.util.TreeMap;
import java.nio.ByteBuffer;

import javax.persistence.Basic;
import javax.persistence.Id;

import net.sf.mardao.core.ColumnField;
import net.sf.mardao.core.CreatedBy;
import net.sf.mardao.core.CreatedDate;
import net.sf.mardao.core.Parent;
import net.sf.mardao.core.UpdatedBy;
import net.sf.mardao.core.UpdatedDate;
import net.sf.mardao.dao.Mapper;
import net.sf.mardao.dao.Supplier;
import net.sf.mardao.domain.AbstractEntityBuilder;
import ${entity.className};

/**
 * The ${entity.simpleName} domain-object specific mapping methods go here.
 *
 * Generated on ${currentDate}.
 * @author mardao DAO generator (${helper.class.name})
 */
public class ${entity.simpleName}Mapper
  implements Mapper<${entity.simpleName}, ${entity.pk.simpleType}> {

  private final Supplier supplier;

  public enum Field {
#if( $entity.parent )
    ${entity.parent.nameUpper}("${entity.parent.name}"),
#end
    ${entity.pk.nameUpper}("${entity.pk.name}")#foreach( $field in $allFields ),
    ${field.nameUpper}("${field.columnName}")#end;

    private final String fieldName;

    Field(String fieldName) {
      this.fieldName = fieldName;
    }

    public String getFieldName() {
      return fieldName;
    }
  }

  private static final Map<String, ColumnField> BASIC_FIELDS = new TreeMap<String, ColumnField>();
  private static final Map<Class, ColumnField> SPECIAL_FIELDS = new HashMap<Class, ColumnField>();
  private static final Map<String, ColumnField> ALL_FIELDS = new TreeMap<String, ColumnField>();

  static {
    SPECIAL_FIELDS.put(Id.class,
        new ColumnField(Field.${entity.pk.nameUpper}.getFieldName(), ${entity.pk.simpleType}.class, Id.class));
#if( $entity.parent )
    SPECIAL_FIELDS.put(Parent.class,
        new ColumnField(Field.${entity.parent.nameUpper}.getFieldName(), ${entity.parent.simpleType}.class, Parent.class));
#end
#foreach( $field in $allFields )
#if( $entity.createdBy && $field == $entity.createdBy )
    SPECIAL_FIELDS.put(CreatedBy.class,
        new ColumnField(Field.${field.nameUpper}.getFieldName(), ${field.simpleType}.class, CreatedBy.class));
#elseif( $entity.createdDate && $field == $entity.createdDate )
    SPECIAL_FIELDS.put(CreatedDate.class,
        new ColumnField(Field.${field.nameUpper}.getFieldName(), ${field.simpleType}.class, CreatedDate.class));
#elseif( $entity.updatedBy && $field == $entity.updatedBy )
    SPECIAL_FIELDS.put(UpdatedBy.class,
        new ColumnField(Field.${field.nameUpper}.getFieldName(), ${field.simpleType}.class, UpdatedBy.class));
#elseif( $entity.updatedDate && $field == $entity.updatedDate )
    SPECIAL_FIELDS.put(UpdatedDate.class,
        new ColumnField(Field.${field.nameUpper}.getFieldName(), ${field.simpleType}.class, UpdatedDate.class));
#else
    BASIC_FIELDS.put(Field.${field.nameUpper}.getFieldName(),
        new ColumnField(Field.${field.nameUpper}.getFieldName(), ${field.simpleType}.class, Basic.class));
#end
#end

    ALL_FIELDS.putAll(BASIC_FIELDS);
    for (ColumnField sf : SPECIAL_FIELDS.values()) {
        ALL_FIELDS.put(sf.getColumnName(), sf);
    }
  }

  @Override
  public Map<String, ColumnField> getBasicFields() {
    return BASIC_FIELDS;
  }

  @Override
  public Map<Class, ColumnField> getSpecialFields() {
    return SPECIAL_FIELDS;
  }

  public ${entity.simpleName}Mapper(Supplier supplier) {
    this.supplier = supplier;
  }

  @Override
  public ${entity.pk.simpleType} fromKey(Object key) {
    return supplier.to${entity.pk.simpleType}Key(key);
  }

  @Override
  public ${entity.simpleName} fromReadValue(Object value) {
    return fromReadValue(value, supplier);
  }

  @Override
  public <RV> ${entity.simpleName} fromReadValue(RV value, Supplier<Object, RV, ?, ?> specificSupplier) {
    ${entity.simpleName} entity = (${entity.simpleName}) specificSupplier.createEntity(this, value);
    if (null != entity) {
      return entity;
    }

    entity = new ${entity.simpleName}();

    // set primary key:
    final Object key = specificSupplier.getKey(value, Field.${entity.pk.nameUpper}.getFieldName());
    entity.set${entity.pk.nameFirst}(specificSupplier.to${entity.pk.simpleType}Key(key));

#if( $entity.parent )
    // set parent key:
    entity.set${entity.parent.nameFirst}(specificSupplier.getParentKey(value, Field.${entity.parent.nameUpper}.getFieldName()));

#end
    // set all fields:
#foreach( $field in $allFields )
    entity.set${field.nameFirst}(specificSupplier.get${field.simpleType}(value, Field.${field.nameUpper}.getFieldName()));
#end
    return entity;
  }

    public Field getCreatedByField() {
#if( $entity.createdBy )
    return Field.${entity.createdBy.nameUpper};
#else
    return null;
#end
    }

  @Override
  public String getCreatedByColumnName() {
#if( $entity.createdBy )
    return Field.${entity.createdBy.nameUpper}.getFieldName();
#else
    return null;
#end
  }

    public Field getCreatedDateField() {
#if( $entity.createdDate )
    return Field.${entity.createdDate.nameUpper};
#else
    return null;
#end
    }

  @Override
  public String getCreatedDateColumnName() {
#if( $entity.createdDate )
    return Field.${entity.createdDate.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  public Field getPrimaryKeyField() {
    return Field.${entity.pk.nameUpper};
  }

  @Override
  public String getPrimaryKeyColumnName() {
    return Field.${entity.pk.nameUpper}.getFieldName();
  }

  @Override
  public String getParentKeyColumnName() {
#if( $entity.parent )
    return Field.${entity.parent.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  @Override
  public String getUpdatedByColumnName() {
#if( $entity.updatedBy )
    return Field.${entity.updatedBy.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  @Override
  public String getUpdatedDateColumnName() {
#if( $entity.updatedDate )
    return Field.${entity.updatedDate.nameUpper}.getFieldName();
#else
    return null;
#end
  }

  @Override
  public ${entity.pk.simpleType} getId(${entity.simpleName} entity) {
    return entity != null ? entity.get${entity.pk.nameFirst}() : null;
  }

  @Override
  public Object getParentKey(${entity.simpleName} entity) {
#if( $entity.parent )
    return null != entity ? entity.get${entity.parent.nameFirst}() : null;
#else
    return null;
#end
  }

  @Override
  public void setParentKey(${entity.simpleName} entity, Object parentKey) {
#if( $entity.parent )
    entity.set${entity.parent.nameFirst}(parentKey);
#else
    // this entity has no parent
#end
  }

  @Override
  public void setPrimaryKey(Object writeValue, Object primaryKey) {
    supplier.set${entity.pk.simpleType}(writeValue, Field.${entity.pk.nameUpper}.getFieldName(), supplier.to${entity.pk.simpleType}Key(primaryKey));
  }

  @Override
  public void updateEntityPostWrite(${entity.simpleName} entity, Object key, Object value) {
    entity.set${entity.pk.nameFirst}(supplier.to${entity.pk.simpleType}Key(key));
#if( $entity.createdBy )
    entity.set${entity.createdBy.nameFirst}(supplier.getWriteString(value, Field.${entity.createdBy.nameUpper}.getFieldName()));
#end
#if( $entity.createdDate )
    entity.set${entity.createdDate.nameFirst}(supplier.getWriteDate(value, Field.${entity.createdDate.nameUpper}.getFieldName()));
#end
#if( $entity.updatedBy )
    entity.set${entity.updatedBy.nameFirst}(supplier.getWriteString(value, Field.${entity.updatedBy.nameUpper}.getFieldName()));
#end
#if( $entity.updatedDate )
    entity.set${entity.updatedDate.nameFirst}(supplier.getWriteDate(value, Field.${entity.updatedDate.nameUpper}.getFieldName()));
#end
}

@Override
  public String getKind() {
    return ${entity.simpleName}.class.getSimpleName();
  }

  @Override
  public Object toKey(Object parentKey, ${entity.pk.simpleType} id) {
    return supplier.toKey(parentKey, getKind(), id);
  }

  @Override
  public Object toWriteValue(${entity.simpleName} entity) {
    final ${entity.pk.simpleType} id = getId(entity);
    final Object parentKey = getParentKey(entity);
    final Object value = supplier.createWriteValue(this, parentKey, id, entity);
    // some suppliers cannot set the keys in above method
    supplier.setPrimaryKey(value, this, Field.${entity.pk.nameUpper}.getFieldName(), toKey(parentKey, id), entity);
#if( $entity.parent )
    supplier.setParentKey(value, this, Field.${entity.parent.nameUpper}.getFieldName(), parentKey, entity);
#end

    // set all fields:
#foreach( $field in $allFields )
    supplier.set${field.simpleType}(value, Field.${field.nameUpper}.getFieldName(), entity.get${field.nameFirst}());
#end
    return value;
  }

//  @Override
  public String getWriteSQL(Serializable id, Object writeValue, Collection arguments) {
    final StringBuilder sql = new StringBuilder("UPDATE ")
        .append(getKind())
        .append(" SET ");

    boolean first = true;
    for (Field f : Field.values()) {
        if (!getPrimaryKeyField().equals(f) &&
            !getCreatedByField().equals(f) &&
            !getCreatedDateField().equals(f)) {
           if (first) {
                first = false;
           }
           else {
                sql.append(", ");
           }
           sql.append(f.getFieldName())
            .append("=?");
           if (null != arguments && null != writeValue) {
            Object arg = supplier.getWriteObject(writeValue, f.getFieldName());
            arguments.add(arg);
           }
        }
    }

    sql.append(" WHERE ")
        .append(getPrimaryKeyColumnName())
        .append("=?");
    if (null != arguments) {
        arguments.add(id);
    }
    return sql.toString();
  }


  public static Builder newBuilder() {
    return new Builder();
  }

  public static class Builder extends AbstractEntityBuilder<${entity.simpleName}> {

    protected Builder() {
      super(new ${entity.simpleName}());
    }

    public Builder ${entity.pk.name}(${entity.pk.simpleType} ${entity.pk.name}) {
      entity.set${entity.pk.nameFirst}(${entity.pk.name});
      return this;
    }

#if( $entity.parent )
    public Builder ${entity.parent.name}(${entity.parent.simpleType} ${entity.parent.name}) {
      entity.set${entity.parent.nameFirst}(${entity.parent.name});
      return this;
    }

#end
#foreach( $field in $allFields )
    public Builder ${field.name}(${field.simpleType} ${field.name}) {
      entity.set${field.nameFirst}(${field.name});
      return this;
    }

#end
  }
}
